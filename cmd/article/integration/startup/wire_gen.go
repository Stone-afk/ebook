// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"ebook/cmd/article/events"
	"ebook/cmd/article/repository"
	"ebook/cmd/article/repository/cache"
	"ebook/cmd/article/repository/dao"
	"ebook/cmd/article/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func InitArticleService() service.ArticleService {
	gormDB := InitTestDB()
	articleDAO := dao.NewGORMArticleDAO(gormDB)
	cmdable := InitRedis()
	articleCache := cache.NewRedisArticleCache(cmdable)
	logger := InitLogger()
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, logger)
	client := InitKafka()
	syncProducer := NewSyncProducer(client)
	producer := events.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer, logger)
	return articleService
}

// wire.go:

var thirdProvider = wire.NewSet(InitRedis, InitTestDB,
	InitLogger,
	NewSyncProducer,
	InitKafka,
)

var articleSvcProvider = wire.NewSet(dao.NewGORMArticleDAO, events.NewKafkaProducer, cache.NewRedisArticleCache, repository.NewArticleRepository, service.NewArticleService)

type TestArticleService struct {
	service.ArticleService
}
