// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/stone/go_project/ebook/ebook/cmd/article/repository/dao/types.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	dao "ebook/cmd/article/repository/dao"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleDAO is a mock of ArticleDAO interface.
type MockArticleDAO struct {
	ctrl     *gomock.Controller
	recorder *MockArticleDAOMockRecorder
}

// MockArticleDAOMockRecorder is the mock recorder for MockArticleDAO.
type MockArticleDAOMockRecorder struct {
	mock *MockArticleDAO
}

// NewMockArticleDAO creates a new mock instance.
func NewMockArticleDAO(ctrl *gomock.Controller) *MockArticleDAO {
	mock := &MockArticleDAO{ctrl: ctrl}
	mock.recorder = &MockArticleDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleDAO) EXPECT() *MockArticleDAOMockRecorder {
	return m.recorder
}

// GetByAuthor mocks base method.
func (m *MockArticleDAO) GetByAuthor(ctx context.Context, authorId int64, offset, limit int) ([]dao.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, authorId, offset, limit)
	ret0, _ := ret[0].([]dao.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor.
func (mr *MockArticleDAOMockRecorder) GetByAuthor(ctx, authorId, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockArticleDAO)(nil).GetByAuthor), ctx, authorId, offset, limit)
}

// GetById mocks base method.
func (m *MockArticleDAO) GetById(ctx context.Context, id int64) (dao.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(dao.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockArticleDAOMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockArticleDAO)(nil).GetById), ctx, id)
}

// GetPubById mocks base method.
func (m *MockArticleDAO) GetPubById(ctx context.Context, id int64) (dao.PublishedArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubById", ctx, id)
	ret0, _ := ret[0].(dao.PublishedArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubById indicates an expected call of GetPubById.
func (mr *MockArticleDAOMockRecorder) GetPubById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubById", reflect.TypeOf((*MockArticleDAO)(nil).GetPubById), ctx, id)
}

// Insert mocks base method.
func (m *MockArticleDAO) Insert(ctx context.Context, art dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockArticleDAOMockRecorder) Insert(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockArticleDAO)(nil).Insert), ctx, art)
}

// ListPubByUtime mocks base method.
func (m *MockArticleDAO) ListPubByUtime(ctx context.Context, uTime time.Time, offset, limit int) ([]dao.PublishedArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPubByUtime", ctx, uTime, offset, limit)
	ret0, _ := ret[0].([]dao.PublishedArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPubByUtime indicates an expected call of ListPubByUtime.
func (mr *MockArticleDAOMockRecorder) ListPubByUtime(ctx, uTime, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPubByUtime", reflect.TypeOf((*MockArticleDAO)(nil).ListPubByUtime), ctx, uTime, offset, limit)
}

// Sync mocks base method.
func (m *MockArticleDAO) Sync(ctx context.Context, art dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockArticleDAOMockRecorder) Sync(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockArticleDAO)(nil).Sync), ctx, art)
}

// SyncStatus mocks base method.
func (m *MockArticleDAO) SyncStatus(ctx context.Context, authorId, id int64, status uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus", ctx, authorId, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockArticleDAOMockRecorder) SyncStatus(ctx, authorId, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockArticleDAO)(nil).SyncStatus), ctx, authorId, id, status)
}

// UpdateById mocks base method.
func (m *MockArticleDAO) UpdateById(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockArticleDAOMockRecorder) UpdateById(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockArticleDAO)(nil).UpdateById), ctx, art)
}

// MockArticleReaderDAO is a mock of ArticleReaderDAO interface.
type MockArticleReaderDAO struct {
	ctrl     *gomock.Controller
	recorder *MockArticleReaderDAOMockRecorder
}

// MockArticleReaderDAOMockRecorder is the mock recorder for MockArticleReaderDAO.
type MockArticleReaderDAOMockRecorder struct {
	mock *MockArticleReaderDAO
}

// NewMockArticleReaderDAO creates a new mock instance.
func NewMockArticleReaderDAO(ctrl *gomock.Controller) *MockArticleReaderDAO {
	mock := &MockArticleReaderDAO{ctrl: ctrl}
	mock.recorder = &MockArticleReaderDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleReaderDAO) EXPECT() *MockArticleReaderDAOMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockArticleReaderDAO) Upsert(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockArticleReaderDAOMockRecorder) Upsert(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockArticleReaderDAO)(nil).Upsert), ctx, art)
}

// UpsertV2 mocks base method.
func (m *MockArticleReaderDAO) UpsertV2(ctx context.Context, art dao.PublishedArticle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertV2", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertV2 indicates an expected call of UpsertV2.
func (mr *MockArticleReaderDAOMockRecorder) UpsertV2(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertV2", reflect.TypeOf((*MockArticleReaderDAO)(nil).UpsertV2), ctx, art)
}

// MockArticleAuthorDAO is a mock of ArticleAuthorDAO interface.
type MockArticleAuthorDAO struct {
	ctrl     *gomock.Controller
	recorder *MockArticleAuthorDAOMockRecorder
}

// MockArticleAuthorDAOMockRecorder is the mock recorder for MockArticleAuthorDAO.
type MockArticleAuthorDAOMockRecorder struct {
	mock *MockArticleAuthorDAO
}

// NewMockArticleAuthorDAO creates a new mock instance.
func NewMockArticleAuthorDAO(ctrl *gomock.Controller) *MockArticleAuthorDAO {
	mock := &MockArticleAuthorDAO{ctrl: ctrl}
	mock.recorder = &MockArticleAuthorDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleAuthorDAO) EXPECT() *MockArticleAuthorDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleAuthorDAO) Create(ctx context.Context, art dao.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleAuthorDAOMockRecorder) Create(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleAuthorDAO)(nil).Create), ctx, art)
}

// UpdateById mocks base method.
func (m *MockArticleAuthorDAO) UpdateById(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockArticleAuthorDAOMockRecorder) UpdateById(ctx, art interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockArticleAuthorDAO)(nil).UpdateById), ctx, art)
}
