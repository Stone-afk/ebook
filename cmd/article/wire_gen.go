// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ebook/cmd/article/events"
	"ebook/cmd/article/grpc"
	"ebook/cmd/article/ioc"
	"ebook/cmd/article/repository"
	"ebook/cmd/article/repository/cache"
	"ebook/cmd/article/repository/dao"
	"ebook/cmd/article/service"
	"ebook/cmd/pkg/appx"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func Init() *appx.App {
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	articleDAO := dao.NewGORMArticleDAO(db)
	cmdable := ioc.InitRedis()
	articleCache := cache.NewRedisArticleCache(cmdable)
	client := ioc.InitEtcdClient()
	userServiceClient := ioc.InitUserClient(client)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, userServiceClient, logger)
	saramaClient := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(saramaClient)
	producer := events.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, producer, logger)
	articleServiceServer := grpc.NewArticleServiceServer(articleService)
	server := ioc.InitGRPCxServer(articleServiceServer, client, logger)
	app := &appx.App{
		GRPCServer: server,
	}
	return app
}

// wire.go:

var thirdProvider = wire.NewSet(ioc.InitRedis, ioc.InitLogger, ioc.InitUserClient, ioc.InitEtcdClient, ioc.InitDB, ioc.InitKafka, ioc.NewSyncProducer)
