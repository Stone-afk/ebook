// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ebook/cmd/followrelation/events"
	"ebook/cmd/followrelation/grpc"
	"ebook/cmd/followrelation/ioc"
	"ebook/cmd/followrelation/repository"
	"ebook/cmd/followrelation/repository/cache"
	"ebook/cmd/followrelation/repository/dao"
	"ebook/cmd/followrelation/service"
	"ebook/cmd/pkg/appx"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func Init() *appx.App {
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	feedEventProducer := events.NewFollowerFeedEventProducer(syncProducer)
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	followRelationDao := dao.NewGORMFollowRelationDAO(db)
	cmdable := ioc.InitRedis()
	followCache := cache.NewRedisFollowCache(cmdable)
	followRepository := repository.NewFollowRelationRepository(followRelationDao, followCache, logger)
	followRelationService := service.NewFollowRelationService(feedEventProducer, logger, followRepository)
	followServiceServer := grpc.NewFollowRelationServiceServer(followRelationService)
	clientv3Client := ioc.InitEtcdClient()
	server := ioc.InitGRPCxServer(followServiceServer, clientv3Client, logger)
	app := &appx.App{
		GRPCServer: server,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(cache.NewRedisFollowCache, dao.NewGORMFollowRelationDAO, repository.NewFollowRelationRepository, service.NewFollowRelationService, grpc.NewFollowRelationServiceServer)

var thirdProvider = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitLogger, ioc.InitEtcdClient, ioc.InitKafka, ioc.NewSyncProducer)
