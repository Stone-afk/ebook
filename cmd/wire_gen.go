// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	repository2 "ebook/cmd/interactive/repository"
	cache2 "ebook/cmd/interactive/repository/cache"
	"ebook/cmd/interactive/repository/dao"
	service2 "ebook/cmd/interactive/service"
	article2 "ebook/cmd/internal/events/article"
	"ebook/cmd/internal/handler"
	"ebook/cmd/internal/handler/jwt"
	"ebook/cmd/internal/repository"
	"ebook/cmd/internal/repository/cache"
	"ebook/cmd/internal/repository/dao/article"
	"ebook/cmd/internal/repository/dao/job"
	"ebook/cmd/internal/repository/dao/user"
	"ebook/cmd/internal/service"
	"ebook/cmd/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	cmdable := ioc.InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.InitMiddlewares(cmdable, jwtHandler, logger)
	db := ioc.InitDB()
	userDAO := user.NewGORMUserDAO(db)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService(cmdable)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := handler.NewUserHandler(userService, codeService, jwtHandler)
	oauth2Service := ioc.InitWechatService(logger)
	wechatHandlerConfig := ioc.NewWechatHandlerConfig()
	oAuth2WechatHandler := handler.NewOAuth2WechatHandler(oauth2Service, userService, jwtHandler, wechatHandlerConfig)
	articleDAO := article.NewGORMArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, userRepository, logger)
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	producer := article2.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, logger, producer)
	clientv3Client := ioc.InitEtcd()
	interactiveServiceClient := ioc.InitInteractiveGRPCClient(clientv3Client)
	articleHandler := handler.NewArticleHandler(articleService, interactiveServiceClient, logger)
	observabilityHandler := handler.NewObservabilityHandler()
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler, observabilityHandler)
	historyRecordRepository := repository.NewHistoryRecordRepository(logger)
	historyReadEventConsumer := article2.NewHistoryReadEventConsumer(client, logger, historyRecordRepository)
	v2 := ioc.NewConsumers(historyReadEventConsumer)
	redisRankingCache := cache.NewRedisRankingCache(cmdable)
	rankingLocalCache := cache.NewRankingLocalCache()
	rankingRepository := repository.NewCachedRankingRepository(redisRankingCache, rankingLocalCache)
	rankingService := service.NewBatchRankingService(interactiveServiceClient, articleService, rankingRepository)
	rlockClient := ioc.InitRLockClient(cmdable)
	rankingJob := ioc.InitRankingJob(rankingService, rlockClient, logger)
	cron := ioc.InitJobs(logger, rankingJob)
	app := &App{
		server: engine,
		consumers: v2,
		cron: cron,
	}
	return app
}

// wire.go:

var rankServiceProvider = wire.NewSet(service.NewBatchRankingService, repository.NewCachedRankingRepository, cache.NewRedisRankingCache, cache.NewRankingLocalCache,
)

var interactiveServiceProvider = wire.NewSet(dao.NewGORMInteractiveDAO, cache2.NewRedisInteractiveCache, repository2.NewInteractiveRepository, service2.NewInteractiveService,
)

var articleServiceProvider = wire.NewSet(article.NewGORMArticleDAO, cache.NewRedisArticleCache, repository.NewArticleRepository, service.NewArticleService,
)

var userServiceProvider = wire.NewSet(user.NewGORMUserDAO, cache.NewRedisUserCache, repository.NewUserRepository, service.NewUserService,
)

var codeServiceProvider = wire.NewSet(cache.NewCodeCache, repository.NewCodeRepository, ioc.InitSMSService, service.NewCodeService,
)

var wechatServiceProvider = wire.NewSet(ioc.InitWechatService, ioc.NewWechatHandlerConfig,
)

var jobSvcProvider = wire.NewSet(job.NewGORMJobDAO, repository.NewPreemptCronJobRepository, service.NewCronJobService,
)

