// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ebook/cmd/pkg/appx"
	"ebook/cmd/user/events"
	"ebook/cmd/user/grpc"
	"ebook/cmd/user/ioc"
	"ebook/cmd/user/repository"
	"ebook/cmd/user/repository/cache"
	"ebook/cmd/user/repository/dao"
	"ebook/cmd/user/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func Init() *appx.App {
	client := ioc.InitKafka()
	syncProducer := ioc.NewSyncProducer(client)
	syncSearchEventProducer := events.NewSaramaSyncProducer(syncProducer)
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	userDAO := dao.NewGORMUserDAO(db)
	cmdable := ioc.InitRedis()
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(syncSearchEventProducer, userRepository, logger)
	userServiceServer := grpc.NewUserServiceServer(userService)
	clientv3Client := ioc.InitEtcdClient()
	server := ioc.InitGRPCxServer(userServiceServer, clientv3Client, logger)
	app := &appx.App{
		GRPCServer: server,
	}
	return app
}

// wire.go:

var thirdProvider = wire.NewSet(ioc.InitLogger, ioc.InitDB, ioc.InitRedis, ioc.InitEtcdClient, ioc.InitKafka, ioc.NewSyncProducer)
