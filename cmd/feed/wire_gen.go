// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ebook/cmd/feed/events"
	"ebook/cmd/feed/grpc"
	"ebook/cmd/feed/ioc"
	"ebook/cmd/feed/repository"
	"ebook/cmd/feed/repository/cache"
	"ebook/cmd/feed/repository/dao"
	"ebook/cmd/feed/service"
	"ebook/cmd/pkg/appx"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func Init() *appx.App {
	logger := ioc.InitLogger()
	client := ioc.InitEtcdClient()
	db := ioc.InitDB(logger)
	feedPullEventDAO := dao.NewFeedPullEventDAO(db)
	feedPushEventDAO := dao.NewFeedPushEventDAO(db)
	cmdable := ioc.InitRedis()
	feedEventCache := cache.NewFeedEventCache(cmdable)
	feedEventRepo := repository.NewFeedEventRepo(feedPullEventDAO, feedPushEventDAO, feedEventCache)
	followServiceClient := ioc.InitFollowClient(client)
	v := ioc.RegisterHandler(feedEventRepo, followServiceClient)
	feedService := service.NewFeedService(feedEventRepo, v)
	feedEventServiceServer := grpc.NewFeedEventServiceServer(feedService)
	server := ioc.InitGRPCServer(logger, client, feedEventServiceServer)
	saramaClient := ioc.InitKafka()
	articleEventConsumer := events.NewArticleEventConsumer(saramaClient, logger, feedService)
	feedEventConsumer := events.NewFeedEventConsumer(saramaClient, logger, feedService)
	followerFeedEventConsumer := events.NewFollowerFeedEventConsumer(saramaClient, logger, feedService)
	likeFeedEventConsumer := events.NewLikeFeedEventConsumer(saramaClient, logger, feedService)
	v2 := ioc.NewConsumers(articleEventConsumer, feedEventConsumer, followerFeedEventConsumer, likeFeedEventConsumer)
	app := &appx.App{
		GRPCServer: server,
		Consumers:  v2,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewFeedPushEventDAO, dao.NewFeedPullEventDAO, cache.NewFeedEventCache, repository.NewFeedEventRepo)

var thirdProvider = wire.NewSet(ioc.InitEtcdClient, ioc.InitLogger, ioc.InitRedis, ioc.InitKafka, ioc.InitDB, ioc.InitFollowClient)
