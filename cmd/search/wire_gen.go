// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ebook/cmd/pkg/appx"
	"ebook/cmd/search/events"
	"ebook/cmd/search/grpc"
	"ebook/cmd/search/ioc"
	"ebook/cmd/search/repository"
	"ebook/cmd/search/repository/dao"
	"ebook/cmd/search/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func Init() *appx.App {
	client := ioc.InitESClient()
	anyDAO := dao.NewAnyElasticDAO(client)
	anyRepository := repository.NewAnyRepository(anyDAO)
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagElasticDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	syncService := service.NewSyncService(anyRepository, userRepository, articleRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchServiceServer(searchService)
	userSearchService := service.NewUserSearchService(userRepository)
	userSearchServiceServer := grpc.NewUserSearchServiceServer(userSearchService)
	articleSearchService := service.NewArticleSearchService(articleRepository)
	articleSearchServiceServer := grpc.NewArticleSearchServiceServer(articleSearchService)
	tagRepository := repository.NewTagRepository(tagDAO)
	tagService := service.NewTagSearchService(tagRepository)
	tagSearchServiceServer := grpc.NewTagSearchServiceServer(tagService)
	clientv3Client := ioc.InitEtcdClient()
	logger := ioc.InitLogger()
	server := ioc.InitGRPCxServer(syncServiceServer, searchServiceServer, userSearchServiceServer, articleSearchServiceServer, tagSearchServiceServer, clientv3Client, logger)
	saramaClient := ioc.InitKafka()
	articleConsumer := events.NewArticleConsumer(saramaClient, logger, syncService)
	tagConsumer := events.NewTagConsumer(saramaClient, logger, syncService)
	userConsumer := events.NewUserConsumer(saramaClient, logger, syncService)
	syncDataEventConsumer := events.NewSyncDataEventConsumer(syncService, saramaClient, logger)
	v := ioc.NewConsumers(articleConsumer, tagConsumer, userConsumer, syncDataEventConsumer)
	app := &appx.App{
		GRPCServer: server,
		Consumers:  v,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewUserElasticDAO, dao.NewArticleElasticDAO, dao.NewAnyElasticDAO, dao.NewTagElasticDAO, repository.NewUserRepository, repository.NewArticleRepository, repository.NewAnyRepository, repository.NewTagRepository, service.NewSyncService, service.NewSearchService, service.NewArticleSearchService, service.NewTagSearchService, service.NewUserSearchService)

var thirdProvider = wire.NewSet(ioc.InitESClient, ioc.InitEtcdClient, ioc.InitLogger, ioc.InitKafka)
