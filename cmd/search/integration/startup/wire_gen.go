// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"ebook/cmd/search/grpc"
	"ebook/cmd/search/ioc"
	"ebook/cmd/search/repository"
	"ebook/cmd/search/repository/dao"
	"ebook/cmd/search/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func InitTagSearchServer() *grpc.TagSearchServiceServer {
	client := InitESClient()
	tagDAO := dao.NewTagElasticDAO(client)
	tagRepository := repository.NewTagRepository(tagDAO)
	tagService := service.NewTagSearchService(tagRepository)
	tagSearchServiceServer := grpc.NewTagSearchServiceServer(tagService)
	return tagSearchServiceServer
}

func InitUserSearchServer() *grpc.UserSearchServiceServer {
	client := InitESClient()
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	userSearchService := service.NewUserSearchService(userRepository)
	userSearchServiceServer := grpc.NewUserSearchServiceServer(userSearchService)
	return userSearchServiceServer
}

func InitArticleSearchServer() *grpc.ArticleSearchServiceServer {
	client := InitESClient()
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagElasticDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	articleSearchService := service.NewArticleSearchService(articleRepository)
	articleSearchServiceServer := grpc.NewArticleSearchServiceServer(articleSearchService)
	return articleSearchServiceServer
}

func InitSearchServer() *grpc.SearchServiceServer {
	client := InitESClient()
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagElasticDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchServiceServer(searchService)
	return searchServiceServer
}

func InitSyncServer() *grpc.SyncServiceServer {
	client := InitESClient()
	anyDAO := dao.NewAnyElasticDAO(client)
	anyRepository := repository.NewAnyRepository(anyDAO)
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagElasticDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	syncService := service.NewSyncService(anyRepository, userRepository, articleRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	return syncServiceServer
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewUserElasticDAO, dao.NewArticleElasticDAO, dao.NewTagElasticDAO, dao.NewAnyElasticDAO, repository.NewUserRepository, repository.NewAnyRepository, repository.NewArticleRepository, repository.NewTagRepository, service.NewSyncService, service.NewSearchService, service.NewArticleSearchService, service.NewTagSearchService, service.NewUserSearchService)

var thirdProvider = wire.NewSet(
	InitESClient, ioc.InitLogger,
)
