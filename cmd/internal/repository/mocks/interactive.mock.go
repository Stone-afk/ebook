// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/stone/go_project/ebook/ebook/cmd/internal/repository/interactive.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveRepository is a mock of InteractiveRepository interface.
type MockInteractiveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveRepositoryMockRecorder
}

// MockInteractiveRepositoryMockRecorder is the mock recorder for MockInteractiveRepository.
type MockInteractiveRepositoryMockRecorder struct {
	mock *MockInteractiveRepository
}

// NewMockInteractiveRepository creates a new mock instance.
func NewMockInteractiveRepository(ctrl *gomock.Controller) *MockInteractiveRepository {
	mock := &MockInteractiveRepository{ctrl: ctrl}
	mock.recorder = &MockInteractiveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveRepository) EXPECT() *MockInteractiveRepositoryMockRecorder {
	return m.recorder
}

// DecrLike mocks base method.
func (m *MockInteractiveRepository) DecrLike(ctx context.Context, biz string, bizId, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrLike", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrLike indicates an expected call of DecrLike.
func (mr *MockInteractiveRepositoryMockRecorder) DecrLike(ctx, biz, bizId, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrLike", reflect.TypeOf((*MockInteractiveRepository)(nil).DecrLike), ctx, biz, bizId, uid)
}

// IncrLike mocks base method.
func (m *MockInteractiveRepository) IncrLike(ctx context.Context, biz string, bizId, uid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrLike", ctx, biz, bizId, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrLike indicates an expected call of IncrLike.
func (mr *MockInteractiveRepositoryMockRecorder) IncrLike(ctx, biz, bizId, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrLike", reflect.TypeOf((*MockInteractiveRepository)(nil).IncrLike), ctx, biz, bizId, uid)
}

// IncrReadCnt mocks base method.
func (m *MockInteractiveRepository) IncrReadCnt(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCnt", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCnt indicates an expected call of IncrReadCnt.
func (mr *MockInteractiveRepositoryMockRecorder) IncrReadCnt(ctx, biz, bizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCnt", reflect.TypeOf((*MockInteractiveRepository)(nil).IncrReadCnt), ctx, biz, bizId)
}
