// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/stone/go_project/ebook/ebook/cmd/internal/repository/cache/interactive.go

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveCache is a mock of InteractiveCache interface.
type MockInteractiveCache struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveCacheMockRecorder
}

// MockInteractiveCacheMockRecorder is the mock recorder for MockInteractiveCache.
type MockInteractiveCacheMockRecorder struct {
	mock *MockInteractiveCache
}

// NewMockInteractiveCache creates a new mock instance.
func NewMockInteractiveCache(ctrl *gomock.Controller) *MockInteractiveCache {
	mock := &MockInteractiveCache{ctrl: ctrl}
	mock.recorder = &MockInteractiveCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveCache) EXPECT() *MockInteractiveCacheMockRecorder {
	return m.recorder
}

// DecrLikeCntIfPresent mocks base method.
func (m *MockInteractiveCache) DecrLikeCntIfPresent(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrLikeCntIfPresent", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrLikeCntIfPresent indicates an expected call of DecrLikeCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) DecrLikeCntIfPresent(ctx, biz, bizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrLikeCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).DecrLikeCntIfPresent), ctx, biz, bizId)
}

// IncrLikeCntIfPresent mocks base method.
func (m *MockInteractiveCache) IncrLikeCntIfPresent(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrLikeCntIfPresent", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrLikeCntIfPresent indicates an expected call of IncrLikeCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) IncrLikeCntIfPresent(ctx, biz, bizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrLikeCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).IncrLikeCntIfPresent), ctx, biz, bizId)
}

// IncrReadCntIfPresent mocks base method.
func (m *MockInteractiveCache) IncrReadCntIfPresent(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCntIfPresent", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCntIfPresent indicates an expected call of IncrReadCntIfPresent.
func (mr *MockInteractiveCacheMockRecorder) IncrReadCntIfPresent(ctx, biz, bizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCntIfPresent", reflect.TypeOf((*MockInteractiveCache)(nil).IncrReadCntIfPresent), ctx, biz, bizId)
}
