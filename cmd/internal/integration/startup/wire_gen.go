// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	repository2 "ebook/cmd/interactive/repository"
	cache2 "ebook/cmd/interactive/repository/cache"
	"ebook/cmd/interactive/repository/dao"
	service2 "ebook/cmd/interactive/service"
	article2 "ebook/cmd/internal/events/article"
	"ebook/cmd/internal/handler"
	"ebook/cmd/internal/handler/jwt"
	"ebook/cmd/internal/job"
	"ebook/cmd/internal/repository"
	"ebook/cmd/internal/repository/cache"
	"ebook/cmd/internal/repository/dao/article"
	"ebook/cmd/internal/repository/dao/async_sms"
	job2 "ebook/cmd/internal/repository/dao/job"
	"ebook/cmd/internal/repository/dao/user"
	"ebook/cmd/internal/service"
	"ebook/cmd/internal/service/sms"
	"ebook/cmd/internal/service/sms/async"
	"ebook/cmd/ioc"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

//go:generate wire
func InitWebServer() *gin.Engine {
	cmdable := InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	logger := InitLogger()
	v := ioc.InitMiddlewares(cmdable, jwtHandler, logger)
	gormDB := InitTestDB()
	userDAO := user.NewGORMUserDAO(gormDB)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService(cmdable)
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := handler.NewUserHandler(userService, codeService, jwtHandler)
	oauth2Service := InitPhantomWechatService(logger)
	wechatHandlerConfig := ioc.NewWechatHandlerConfig()
	oAuth2WechatHandler := handler.NewOAuth2WechatHandler(oauth2Service, userService, jwtHandler, wechatHandlerConfig)
	articleDAO := article.NewGORMArticleDAO(gormDB)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, userRepository, logger)
	client := InitKafka()
	syncProducer := NewSyncProducer(client)
	producer := article2.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, logger, producer)
	interactiveDAO := dao.NewGORMInteractiveDAO(gormDB)
	interactiveCache := cache2.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository2.NewInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service2.NewInteractiveService(interactiveRepository, logger)
	articleHandler := handler.NewArticleHandler(articleService, interactiveService, logger)
	observabilityHandler := handler.NewObservabilityHandler()
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler, observabilityHandler)
	return engine
}

func InitArticleHandler(dao article.ArticleDAO) *handler.ArticleHandler {
	cmdable := InitRedis()
	articleCache := cache.NewRedisArticleCache(cmdable)
	gormDB := InitTestDB()
	userDAO := user.NewGORMUserDAO(gormDB)
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	logger := InitLogger()
	articleRepository := repository.NewArticleRepository(dao, articleCache, userRepository, logger)
	client := InitKafka()
	syncProducer := NewSyncProducer(client)
	producer := article2.NewKafkaProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, logger, producer)
	interactiveDAO := dao.NewGORMInteractiveDAO(gormDB)
	interactiveCache := cache2.NewRedisInteractiveCache(cmdable)
	interactiveRepository := repository2.NewInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service2.NewInteractiveService(interactiveRepository, logger)
	articleHandler := handler.NewArticleHandler(articleService, interactiveService, logger)
	return articleHandler
}

func InitUserSvc() service.UserService {
	gormDB := InitTestDB()
	userDAO := user.NewGORMUserDAO(gormDB)
	cmdable := InitRedis()
	userCache := cache.NewRedisUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	logger := InitLogger()
	userService := service.NewUserService(userRepository, logger)
	return userService
}

func InitAsyncSmsService(svc sms.Service) *async.Service {
	gormDB := InitTestDB()
	asyncSmsDAO := async_sms.NewGORMAsyncSmsDAO(gormDB)
	asyncSmsRepository := repository.NewAsyncSMSRepository(asyncSmsDAO)
	logger := InitLogger()
	asyncService := async.NewService(svc, asyncSmsRepository, logger)
	return asyncService
}

func InitInteractiveService() service2.InteractiveService {
	gormDB := InitTestDB()
	interactiveDAO := dao.NewGORMInteractiveDAO(gormDB)
	cmdable := InitRedis()
	interactiveCache := cache2.NewRedisInteractiveCache(cmdable)
	logger := InitLogger()
	interactiveRepository := repository2.NewInteractiveRepository(interactiveDAO, interactiveCache, logger)
	interactiveService := service2.NewInteractiveService(interactiveRepository, logger)
	return interactiveService
}

func InitJobScheduler() *job.Scheduler {
	gormDB := InitTestDB()
	jobDAO := job2.NewGORMJobDAO(gormDB)
	cronJobRepository := repository.NewPreemptCronJobRepository(jobDAO)
	logger := InitLogger()
	cronJobService := service.NewCronJobService(cronJobRepository, logger)
	scheduler := job.NewScheduler(cronJobService, logger)
	return scheduler
}

func InitJwtHandler() jwt.Handler {
	cmdable := InitRedis()
	jwtHandler := jwt.NewRedisJWTHandler(cmdable)
	return jwtHandler
}

// wire.go:

var thirdProvider = wire.NewSet(InitRedis, InitTestDB,
	InitLogger,
	NewSyncProducer,
	InitKafka,
)

var userSvcProvider = wire.NewSet(user.NewGORMUserDAO, cache.NewRedisUserCache, repository.NewUserRepository, service.NewUserService)

var articleSvcProvider = wire.NewSet(article.NewGORMArticleDAO, article2.NewKafkaProducer, cache.NewRedisArticleCache, repository.NewArticleRepository, service.NewArticleService)

var interactiveSvcProvider = wire.NewSet(dao.NewGORMInteractiveDAO, cache2.NewRedisInteractiveCache, repository2.NewInteractiveRepository, service2.NewInteractiveService)

var rankServiceProvider = wire.NewSet(service.NewBatchRankingService, repository.NewCachedRankingRepository, cache.NewRedisRankingCache, cache.NewRankingLocalCache)

var jobProviderSet = wire.NewSet(job2.NewGORMJobDAO, repository.NewPreemptCronJobRepository, service.NewCronJobService)
